require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AuthorsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Author. As you add validations to Author, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { attributes_for(:author) }

  let(:invalid_attributes) { attributes_for(:invalid_author) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AuthorsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all authors as @authors" do
      author1 = create(:author)
      author2 = create(:author)

      get :index
      expect(assigns(:authors)).to match [author1,author2]
    end

    it "renders the :index template" do
      get :index
      expect(response).to render_template :index
    end     
  end

  describe "GET show" do
    it "assigns the requested author as @author" do
      author = create(:author)
      get :show, id: author
      expect(assigns(:author)).to eq author
    end  

    it "renders the show template" do
      author = create(:author)
      get :show, id: author
      expect(response).to render_template :show
    end
  end

  describe "GET new" do
    it "assigns a new author as @author" do
      get :new
      expect(assigns(:author)).to be_a_new(Author)
    end

    it "renders the new template" do
      get :new
      expect(response).to render_template :new
    end

  end

  describe "GET edit" do
    it "assigns the requested author as @author" do
      author = create(:author)
      get :edit, id: author
      expect(assigns(:author)).to eq(author)
    end

    it "renders the edit template" do
      author = create(:author)
      get :edit, id: author
      expect(response).to render_template :edit
    end    
  end

  describe "POST create" do
    context "with valid params" do
      it "creates a new Author" do
        expect {
          post :create, author: valid_attributes
        }.to change(Author, :count).by(1)
      end

      it "assigns a newly created author as @author" do
        post :create, author: valid_attributes
        expect(assigns(:author)).to be_a(Author)
        expect(assigns(:author)).to be_persisted
      end

      it "redirects to the created author" do
        post :create, author: valid_attributes
        expect(response).to redirect_to(Author.last)
      end
    end

    context "with invalid params" do
      it "does not save the new author in the database" do
        expect {
          post :create, author: invalid_attributes
        }.not_to change(Author, :count)
      end      

      it "assigns a newly created but unsaved author as @author" do
        post :create, author: invalid_attributes
        expect(assigns(:author)).to be_a_new(Author)
        expect(assigns(:author)).not_to be_persisted
      end

      it "re-renders the 'new' template" do
        post :create, author: invalid_attributes
        expect(response).to render_template :new
      end
    end
  end

  describe "PATCH update" do
    before :each do
      @author = create(:author, lastname: "Tolkien")
    end    

    context "with valid params" do
      it "locates the requested @author" do
        patch :update, id: @author, author: valid_attributes
        expect(assigns(:author)).to eq(@author)
      end

      it "updates the requested author" do
        patch :update, id: @author, author: attributes_for(:author, lastname: "R.R. Martin")
        @author.reload
        expect(@author.lastname).to eq("R.R. Martin")
      end


      it "redirects to the author" do
        patch :update, id: @author, author: valid_attributes
        expect(response).to redirect_to(@author)
      end
    end

    context "with invalid params" do
      it "does not change the author's attributes" do
        patch :update, id: @author, author: invalid_attributes
        @author.reload
        expect(@author.lastname).to eq("Tolkien")
      end

      it "re-renders the 'edit' template" do        
        patch :update, id: @author, author: invalid_attributes
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    before :each do
      @author = create(:author)
    end

    it "destroys the requested author" do      
      expect {
        delete :destroy, id: @author
      }.to change(Author, :count).by(-1)
    end

    it "redirects to the authors list" do      
      delete :destroy, id: @author
      expect(response).to redirect_to(authors_url)
    end
  end


end
