require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CategoriesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Category. As you add validations to Category, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CategoriesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns root categories sorted by ddc as @categories" do
      category1 = create(:category)
      child = create(:category, parent_id: category1.id)
      category2 = create(:category)
      get :index
      expect(assigns(:categories)).to eq [category1,category2].sort_by!{ |item| item[:ddc] }
    end

    it "renders the :index template" do
      get :index
      expect(response).to render_template :index
    end      
  end

  describe "GET show" do
    it "assigns the requested category as @category" do
      category = create(:category)
      get :show, id: category
      expect(assigns(:category)).to eq category
    end

    it "assigns the requested category's children as @children and sorts them by ddc" do
      category = create(:category)
      child1 = create(:category, parent_id: category.id)
      child2 = create(:category, parent_id: category.id)
      
      get :show, id: category
      expect(assigns(:children)).to eq [child1, child2].sort_by!{ |item| item[:ddc] }
    end    

    it "renders the show template" do
      category = create(:category)
      get :show, id: category
      expect(response).to render_template :show
    end
  end

  describe "GET new" do
    it "assigns a new category as @category" do
      get :new
      expect(assigns(:category)).to be_a_new(Category)
    end

    it "renders the new template" do
      get :new
      expect(response).to render_template :new
    end

  end

  describe "GET edit" do
    it "assigns the requested category as @category" do
      category = create(:category)
      get :edit, id: category
      expect(assigns(:category)).to eq(category)
    end

    it "renders the edit template" do
      category = create(:category)
      get :edit, id: category
      expect(response).to render_template :edit
    end    
  end

  describe "POST create" do
    context "with valid params" do
      it "creates a new Category" do
        expect {
          post :create, category: attributes_for(:category)
        }.to change(Category, :count).by(1)
      end

      it "assigns a newly created category as @category" do
        post :create, category: attributes_for(:category)
        expect(assigns(:category)).to be_a(Category)
        expect(assigns(:category)).to be_persisted
      end

      it "redirects to the created category" do
        post :create, category: attributes_for(:category)
        expect(response).to redirect_to(Category.last)
      end
    end

    context "with invalid params" do
      it "does not save the new category in the database" do
        expect {
          post :create, category: attributes_for(:invalid_category)
        }.not_to change(Category, :count)
      end      

      it "assigns a newly created but unsaved category as @category" do
        post :create, category: attributes_for(:invalid_category)
        expect(assigns(:category)).to be_a_new(Category)
        expect(assigns(:category)).not_to be_persisted
      end

      it "re-renders the 'new' template" do
        post :create, category: attributes_for(:invalid_category)
        expect(response).to render_template :new
      end
    end
  end

  describe "PATCH update" do
    before :each do
      @category = create(:category, name: "Applied Sciences")
    end    

    context "with valid params" do
      it "locates the requested @category" do
        patch :update, id: @category, category: attributes_for(:category)
        expect(assigns(:category)).to eq(@category)
      end

      it "updates the requested category" do
        patch :update, id: @category, category: attributes_for(:category, name: "History and arts")
        @category.reload
        expect(@category.name).to eq("History and arts")
      end


      it "redirects to the category" do
        patch :update, id: @category, category: attributes_for(:category)
        expect(response).to redirect_to(@category)
      end
    end

    context "with invalid params" do
      it "does not change the category's attributes" do
        patch :update, id: @category, category: attributes_for(:invalid_category)
        @category.reload
        expect(@category.name).to eq("Applied Sciences")
      end

      it "re-renders the 'edit' template" do        
        patch :update, id: @category, category: attributes_for(:invalid_category)
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    before :each do
      @category = create(:category)
    end

    it "destroys the requested category" do      
      expect {
        delete :destroy, id: @category
      }.to change(Category, :count).by(-1)
    end

    it "redirects to the categories list" do      
      delete :destroy, id: @category
      expect(response).to redirect_to(categories_url)
    end
  end

end
